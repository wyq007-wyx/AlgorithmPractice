/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
  Node* copyRandomList(Node* head) {
	if (head == NULL) return NULL;
	Node *head2 = new Node(-1);
	Node *q;
	Node *p = head;
	unordered_map<Node *, Node *> map;//hashmap存放源节点和新节点的地址，建立映射关系
	while (p != NULL) {
		q = new Node(p->val);
		map[p] = q ;
		p = p->next;
	}
	p = head;
	while (p != NULL) {
		q = map[p];
    //通过映射关系找到新节点的next节点，和random节点
		q->next = map[p->next];
		q->random = map[p->random];
		p = p->next;
	}
	return map[head];

}
};
